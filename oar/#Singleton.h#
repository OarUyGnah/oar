#ifndef __OAR_SINGLETON_H__
#define __OAR_SINGLETON_H__

#include <memory>

namespace oar {

  template<class T,class X,int N>
  T& getInstanceX() {
    static T t;
    return t;
  }

  template<class T,class = void,int N = 0>
  class Singleton {
  public:
    static T* getInstance()
  };


}


#endif
